<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mapper.dao.StudentDao">

    <!--parameterType指定的是参数类型，Dao接口里面的@Param指定的是参数名

    parameterType的属性值可以用mybatis定义的Java类型别名,例如integer

    parameterType的属性值也可以使用Java类型的全限定名称，例如java.lang.Integer
    (实际开发中都是使用的第二种，因为可读性更好）

    参数简单时，parameterType可以省略不写，mybatis可以通过反射获取dao接口的
    参数类型
    -->
    <!--定义sql语句   resultType 返回值实体类  需要和dao接口中定义的返回值类型一致-->
    <select id="selectById" parameterType="java.lang.Integer" resultType="com.example.mapper.model.Student">
        select id,name,age from student where id=#{stuId}
    </select>

    <!--
    dao接口方法形参是一个简单类型(Java基本数据类型和String)
    的参数时，mapper文件获取这个值可以使用#{任意字符}
    -->
    <select id="selectByEmail" resultType="com.example.mapper.model.Student">
        select id,name,age,email,status  from student where email=#{李四}
    </select>

    <!--
    多个简单类型的参数，
    当使用了@Param命名后，例如@Param("myname")
    在mapper中，使用#{命名的参数} 例如name=#{myname}
    -->
    <select id="selectByNameOrAge" resultType="com.example.mapper.model.Student">
        select id,name,age,email,status  from student where name=#{myname} or age=#{myage}
    </select>

    <!--
        传入一个java对象作为方法的参数，使用对象的属性作为sql中的参数
        简单的语法 #{属性名}，mybatis调用属性名对应的getxxx方法获取对应的属性值
        例如name=#{name} 在调用getName()后被替换为name=张三
        -->
    <select id="selectByObject" resultType="com.example.mapper.model.Student">
        select id,name,age,email,status  from student where name=#{name} or age=#{age}
    </select>

    <select id="selectByQueryParam" resultType="com.example.mapper.model.Student">
        select id,name,age,email,status  from student where name=#{param1} or age=#{param2}
    </select>

    <!--
    为什么不建议使用map？
    使用map传参可读性比较差，好处是容易添加值
    使用map传递参数，获取map的值，是通过key获取的，语法#{key}
    SQl里面的#{key}与map里面的key要完全一致
    使用map一般需要指定parameterType="map"
    -->
    <select id="selectByMap" resultType="com.example.mapper.model.Student" parameterType="map">
        select id,name,age,email,status  from student where name=#{name} or age=#{age}
    </select>

    <update id="updateStudent" parameterType="com.example.mapper.model.Student">
        update student set email=#{email}
        where name=#{name} and age=#{age}
    </update>
</mapper>